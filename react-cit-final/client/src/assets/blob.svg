<svg id="visual" viewBox="0 0 960 540" width="960" height="540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><rect width="960" height="540" fill="#F7CACA"/><g><g transform="translate(177 416)"><path d="M47.4 -17.1C54.4 6.1 48.1 31.9 30.4 45.7C12.7 59.4 -16.5 61.2 -33.5 48.3C-50.5 35.5 -55.3 8 -47.7 -16.1C-40.1 -40.2 -20 -60.8 0.1 -60.9C20.2 -60.9 40.4 -40.3 47.4 -17.1Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(333 69)"><path d="M45.7 -14.6C51.4 2.8 42.9 25 27.1 36.2C11.4 47.4 -11.6 47.5 -25.6 36.9C-39.6 26.4 -44.6 5.1 -38.8 -12.3C-33 -29.7 -16.5 -43.3 1.7 -43.9C20 -44.5 40 -32 45.7 -14.6Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(708 56)"><path d="M36.7 -13.9C41.3 2.2 34.4 20 20.9 30.1C7.4 40.3 -12.7 42.7 -24.9 33.9C-37.1 25.1 -41.4 5.1 -36 -12.1C-30.5 -29.4 -15.3 -44 0.4 -44.1C16.1 -44.2 32.1 -29.9 36.7 -13.9Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(916 132)"><path d="M32.4 -10.7C35.8 0.1 28.3 14.3 17.2 22C6.1 29.7 -8.6 30.8 -19.1 23.8C-29.6 16.7 -36 1.5 -32.1 -9.9C-28.2 -21.2 -14.1 -28.6 0.2 -28.7C14.5 -28.8 28.9 -21.4 32.4 -10.7Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(147 248)"><path d="M7.8 -2.3C9 1 8 5.3 5.2 7.4C2.3 9.5 -2.3 9.5 -5.3 7.3C-8.3 5.1 -9.7 0.7 -8.6 -2.6C-7.4 -5.9 -3.7 -8.1 -0.2 -8.1C3.3 -8 6.7 -5.6 7.8 -2.3Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(39 57)"><path d="M8.4 -3.1C9.4 0.3 7.7 4.3 4.6 6.6C1.5 8.9 -2.9 9.5 -5.8 7.5C-8.7 5.5 -10.1 0.9 -8.9 -2.8C-7.6 -6.5 -3.8 -9.3 0 -9.3C3.7 -9.3 7.5 -6.5 8.4 -3.1Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(728 297)"><path d="M15.3 -5.3C17 0.5 13.8 7.5 8.5 11.3C3.1 15.1 -4.3 15.6 -9.9 12C-15.4 8.3 -19.1 0.5 -17.1 -5.5C-15.2 -11.6 -7.6 -15.7 -0.4 -15.6C6.7 -15.5 13.5 -11 15.3 -5.3Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(472 443)"><path d="M32 -11.6C35.8 1.3 29.3 16.3 18.4 23.8C7.6 31.3 -7.6 31.3 -17.6 24.1C-27.5 16.9 -32.3 2.4 -28.5 -10.4C-24.7 -23.2 -12.3 -34.4 0.9 -34.7C14.1 -35 28.2 -24.4 32 -11.6Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(926 417)"><path d="M26.3 -7.8C30.1 3.3 26.5 17.5 17.7 23.8C8.8 30.1 -5.4 28.5 -15 21.4C-24.5 14.2 -29.5 1.5 -26.2 -8.8C-23 -19 -11.5 -26.9 -0.1 -26.8C11.2 -26.8 22.4 -18.9 26.3 -7.8Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(733 531)"><path d="M8.4 -2.8C9.4 0.5 7.8 4.5 5 6.5C2.1 8.5 -2 8.4 -4.9 6.4C-7.7 4.4 -9.4 0.4 -8.4 -2.8C-7.4 -6 -3.7 -8.3 0 -8.3C3.7 -8.3 7.4 -6 8.4 -2.8Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(503 14)"><path d="M17.4 -6C20 2.3 17.8 11.8 11.7 16.3C5.6 20.8 -4.3 20.2 -11.3 15.2C-18.2 10.2 -22.2 0.8 -19.8 -7.2C-17.5 -15.2 -8.7 -21.8 -0.7 -21.6C7.4 -21.4 14.8 -14.3 17.4 -6Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(508 265)"><path d="M22.2 -7.2C25.4 2.4 22 14.1 14.4 19.6C6.7 25 -5.2 24.3 -13.7 18.3C-22.2 12.3 -27.3 0.9 -24.4 -8.4C-21.6 -17.6 -10.8 -24.7 -0.6 -24.5C9.6 -24.3 19.1 -16.8 22.2 -7.2Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(5 481)"><path d="M45.6 -13.7C52.6 6.7 47.3 32.2 30.3 45.4C13.3 58.6 -15.3 59.5 -32.4 46.6C-49.6 33.6 -55.3 6.9 -47.9 -13.9C-40.6 -34.7 -20.3 -49.6 -0.5 -49.4C19.3 -49.2 38.6 -34 45.6 -13.7Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(344 307)"><path d="M44.5 -16.5C50.8 4.9 44.3 28.5 28.6 40.2C12.8 51.8 -12.3 51.6 -30.2 39.1C-48.2 26.7 -59.1 2 -52.8 -19.4C-46.6 -40.7 -23.3 -58.7 -2.1 -58C19.1 -57.3 38.2 -38 44.5 -16.5Z" stroke="#ffffff" fill="none" stroke-width="20"/></g><g transform="translate(319 529)"><path d="M19.6 -5.7C22.2 1.7 19 11.7 12.6 16.1C6.2 20.5 -3.5 19.3 -9.5 14.6C-15.5 9.8 -18 1.6 -15.8 -5.2C-13.6 -12 -6.8 -17.4 0.8 -17.6C8.5 -17.9 17 -13.1 19.6 -5.7Z" stroke="#ffffff" fill="none" stroke-width="20"/></g></g></svg>